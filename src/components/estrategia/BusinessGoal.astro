---
// Business Goal Component - Step 1: Define main business goal for the year
---

<section class="business-goal-section">
  <div class="container">
    <div class="content-layout">
      <div class="question-column">
        <div class="step-indicator">Paso 1</div>
        <h2 class="question-title">Metas del negocios para esta a√±o</h2>
      </div>
      
      <div class="options-column">
        <div class="goals-grid">
          <div class="goal-option">
            <div class="goal-selection selected">
              <span class="goal-text">Aumentar Ingresos</span>
            </div>
            <div class="goal-input">
              <label class="input-label">Meta YoY (%)</label>
              <input type="number" class="percentage-input" value="25" min="0" max="1000" step="0.1" readonly>
            </div>
          </div>
          
          <div class="goal-option">
            <div class="goal-selection">
              <span class="goal-text">Disminuir Costos</span>
            </div>
            <div class="goal-input">
              <label class="input-label">Meta YoY (%)</label>
              <input type="number" class="percentage-input" placeholder="0" min="0" max="1000" step="0.1" readonly>
            </div>
          </div>
          
          <div class="goal-option">
            <div class="goal-selection">
              <span class="goal-text">Ambos</span>
            </div>
            <div class="goal-input">
              <label class="input-label">Meta YoY (%)</label>
              <input type="number" class="percentage-input" placeholder="0" min="0" max="1000" step="0.1" readonly>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .business-goal-section {
    padding: 1rem 0;
    background: #fff;
    position: relative;
    overflow: hidden;
  }

  .container {
    max-width: 90%;
    margin: 0 auto;
    padding: 0 2rem;
  }

  @media (min-width: 1400px) {
    .container {
      max-width: 90%;
    }
  }

  .content-layout {
    display: grid;
    grid-template-columns: 1fr 3fr;
    gap: 3rem;
    align-items: flex-start;
  }

  .question-column {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    gap: 1rem;
  }

  .step-indicator {
    font-size: 1rem;
    font-weight: 400;
    color: #000;
    font-style: italic;
    margin-bottom: 0rem;
  }

  .question-title {
    font-size: clamp(1rem, 4vw, 2rem);
    font-weight: 700;
    color: #000;
    line-height: 1.2;
    margin: 0;
    font-style: italic;
  }

  .options-column {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .goals-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    width: 100%;
    max-width: 1000px;
  }

  .goal-option {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .goal-selection {
    background: #f8f8f8;
    border: 2px solid #ddd;
    border-radius: 12px;
    padding: 5rem 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    height: 120px;
    transition: all 0.3s ease;
    position: relative;
    will-change: transform;
    backface-visibility: hidden;
    cursor: pointer;
    opacity: 0.7;
  }

  .goal-selection:hover {
    background: #fff;
    border-color: #ef1d27;
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(239, 29, 39, 0.15);
    opacity: 1;
  }

  .goal-selection.selected {
    background: #fff;
    border-color: #ef1d27;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(239, 29, 39, 0.3);
    opacity: 1;
  }

  .goal-text {
    font-size: clamp(1.1rem, 2vw, 1.3rem);
    font-weight: 700;
    color: #999;
    line-height: 1.3;
    transition: color 0.3s ease;
  }

  .goal-selection:hover .goal-text {
    color: #ef1d27;
  }

  .goal-selection.selected .goal-text {
    color: #ef1d27;
  }

  .goal-input {
    background: #fff;
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 2rem 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    min-height: 60px;
    position: relative;
  }

  .input-label {
    font-size: 1rem;
    font-weight: 400;
    color: #000;
    text-align: left;
  }

  .percentage-input {
    background: transparent;
    border: none;
    border-bottom: 2px solid #ef1d27;
    outline: none;
    font-size: 1.4rem;
    font-weight: 600;
    color: #000;
    text-align: center;
    width: 100%;
    padding: 0.25rem 0;
    margin-top: 0.25rem;
    min-height: 2rem;
  }

  .percentage-input:focus {
    border-bottom-color: #d41e2a;
  }

  .percentage-input::placeholder {
    color: #999;
    font-weight: 400;
  }

  /* Responsive Design */
  @media (max-width: 1023px) {
    .content-layout {
      grid-template-columns: 1fr;
      gap: 3rem;
    }

    .question-column {
      align-items: center;
      text-align: center;
    }

    .question-title {
      text-align: center;
    }

    .goals-grid {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
  }

  @media (max-width: 767px) {
    .business-goal-section {
      padding: 4rem 0;
    }

    .goals-grid {
      gap: 1.5rem;
    }

    .goal-selection {
      height: 100px;
      padding: 2rem 1.5rem;
    }

    .goal-input {
      padding: 0.75rem 1rem;
      min-height: 50px;
    }
  }

  @media (max-width: 480px) {
    .business-goal-section {
      padding: 3rem 0;
    }

    .question-title {
      font-size: clamp(1.8rem, 5vw, 2.5rem);
    }

    .goal-selection {
      height: 90px;
      padding: 1.5rem 1rem;
    }

    .goal-text {
      font-size: clamp(1rem, 3vw, 1.1rem);
    }

    .input-label {
      font-size: 0.9rem;
    }

    .percentage-input {
      font-size: 1.2rem;
      min-height: 1.8rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const goalSelections = document.querySelectorAll('.goal-selection');
    const percentageInputs = document.querySelectorAll('.percentage-input');
    
    goalSelections.forEach(selection => {
      selection.addEventListener('click', function(this: HTMLElement) {
        // Remove selected class from all selections
        goalSelections.forEach(s => s.classList.remove('selected'));
        
        // Add selected class to clicked selection
        this.classList.add('selected');
        
        // Get the selected goal type
        const goalText = this.querySelector('.goal-text')?.textContent;
        console.log('Selected goal type:', goalText);
        
        // Here you can add logic to proceed to next step
        // For example: store the selection and move to next step
      });
    });

    // Handle percentage input changes
    percentageInputs.forEach(input => {
      input.addEventListener('input', function(this: HTMLInputElement) {
        const value = this.value;
        const goalOption = this.closest('.goal-option');
        const goalText = goalOption?.querySelector('.goal-text')?.textContent;
        
        console.log(`Percentage for ${goalText}: ${value}%`);
        
        // Here you can add logic to store the percentage value
        // For example: update form state or validate input
      });
    });
  });
</script>
