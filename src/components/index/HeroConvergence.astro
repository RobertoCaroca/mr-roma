---
// Hero Convergence - Main hero section with title and convergence visualization
---

<section class="hero-convergence">
  <div class="container">
    <!-- Convergence Visualization with integrated title -->
    <div class="convergence-visualization">
      <!-- Title and Subtitle -->
      <div class="convergence-title" id="convergenceTitle">
        <h1 class="convergence-title-main">MR ROMA</h1>
        <p class="convergence-title-subtitle">ALINEAMOS UX, PRODUCTO Y TECNOLOGÍA CON EL NEGOCIO PARA GENERAR UN IMPACTO REAL.</p>
      </div>
      
      <!-- Business Sphere (Center) -->
      <div class="sphere business-sphere" data-label="MR ROMA">
        <div class="sphere-content">
          <span class="sphere-text">MR ROMA</span>
        </div>
        <div class="sphere-glow"></div>
      </div>
      
      <!-- UX Sphere -->
      <div class="sphere ux-sphere" data-label="UX">
        <div class="sphere-content">
          <span class="sphere-text">UX</span>
        </div>
        <div class="sphere-trail"></div>
      </div>
      
      <!-- Product Sphere -->
      <div class="sphere product-sphere" data-label="PRODUCTO">
        <div class="sphere-content">
          <span class="sphere-text">PRODUCTO</span>
        </div>
        <div class="sphere-trail"></div>
      </div>
      
      <!-- Technology Sphere -->
      <div class="sphere tech-sphere" data-label="TECNOLOGÍA">
        <div class="sphere-content">
          <span class="sphere-text">TECNOLOGÍA</span>
        </div>
        <div class="sphere-trail"></div>
      </div>
      
      <!-- Convergence Effect -->
      <div class="convergence-rings">
        <div class="ring ring-1"></div>
        <div class="ring ring-2"></div>
        <div class="ring ring-3"></div>
      </div>
    </div>
    
  </div>
  
  <!-- Scroll Progress Bar -->
  <div class="scroll-progress" id="scrollProgress"></div>
  
  <!-- Scroll Indicator -->
  <div class="scroll-indicator" id="scrollIndicator">
    <div class="scroll-arrow">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M7 10L12 15L17 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </div>
  </div>
</section>

<style>
  /* ===== HERO SECTION ===== */
  .hero-convergence {
    min-height: 190vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    background: transparent;
    position: relative;
    overflow: hidden;
  }

  .container {
    max-width: 80%;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* ===== SCROLL INDICATOR ===== */
  .scroll-indicator {
    position: fixed;
    bottom: 3.5rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 100;
    cursor: pointer;
    opacity: 1;
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .scroll-indicator:hover {
    transform: translateX(-50%) translateY(-5px);
  }

  .scroll-indicator.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .scroll-arrow {
    width: 50px;
    height: 50px;
    background: rgba(0, 0, 0, 0.8);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    transition: all 0.3s ease;
    animation: bounce 2s infinite;
  }

  .scroll-arrow:hover {
    background: rgba(0, 0, 0, 1);
    transform: scale(1.1);
  }

  .scroll-arrow svg {
    width: 20px;
    height: 20px;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
    60% {
      transform: translateY(-5px);
    }
  }

  /* ===== CONVERGENCE VISUALIZATION ===== */
  .convergence-visualization {
    position: absolute;
    top: 23%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 700px;
    height: 700px;
    z-index: 10;
    transition: transform 0.5s ease;
  }

  /* ===== TITLE STYLES ===== */
  .convergence-title {
    position: absolute;
    top: -150px;
    left: 50%;
    transform: translateX(-50%);
    text-align: center;
    z-index: 15;
    opacity: 0;
    transition: opacity 0.3s ease;
    width: 800px;
    max-width: 100%;
  }

  .convergence-title.visible {
    opacity: 1;
  }

  .convergence-title-main {
    display: block;
    font-size: clamp(4rem, 8vw, 7rem);
    font-weight: 900;
    color: #000000;
    margin-bottom: 1rem;
    letter-spacing: -0.08em;
    line-height: 1.1;
    text-transform: uppercase;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .convergence-title-main.visible {
    opacity: 1;
  }

  .convergence-title-subtitle {
    display: block;
    font-size: clamp(1rem, 2.5vw, 1.5rem);
    font-weight: 300;
    color: #000000;
    max-width: 750px;
    margin: 0 auto;
    line-height: 1.4;
    letter-spacing: 0.02em;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .convergence-title-subtitle.visible {
    opacity: 0.8;
  }

  /* ===== SPHERE STYLES ===== */
  .sphere {
    position: absolute;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }

  .sphere-content {
    text-align: center;
    color: #000000;
    font-weight: 700;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    z-index: 2;
    position: relative;
  }

  .sphere-text {
    font-size: 0.8rem;
  }

  .business-sphere .sphere-text {
    font-weight: 800;
    letter-spacing: 0.05em;
    color: #ffffff;
    transition: opacity 0.2s ease, transform 0.3s ease;
  }

  .sphere-glow {
    position: absolute;
    top: -15px;
    left: -15px;
    right: -15px;
    bottom: -15px;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(0,0,0,0.1) 0%, transparent 70%);
    opacity: 0;
  }

  .sphere-trail {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 6px;
    height: 6px;
    background: rgba(0,0,0,0.3);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    opacity: 0;
  }

  /* ===== SPHERE POSITIONING ===== */
  .business-sphere {
    width: 140px;
    height: 140px;
    background: #000000;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    box-shadow: 0 20px 60px rgba(0,0,0,0.3);
  }

  .business-sphere:hover {
    transform: translate(-50%, -50%) scale(1.1);
    box-shadow: 0 25px 70px rgba(0,0,0,0.4);
  }

  /* ===== ORBITAL SPHERES ===== */
  .ux-sphere,
  .product-sphere,
  .tech-sphere {
    width: 140px;
    height: 140px;
    background: #ffffff;
    border: 4px solid #000000;
    position: absolute;
    top: 50%;
    left: 53%;
    transform: translate(-50%, -50%);
    z-index: 5;
    transition: all 0.6s ease;
    transform-origin: 0 0;
  }

  .ux-sphere {
    animation: orbit-ux 10s linear infinite;
  }

  .product-sphere {
    animation: orbit-product 9s linear infinite;
  }

  .tech-sphere {
    animation: orbit-tech 11s linear infinite;
  }

  /* ===== CONVERGENCE STATES ===== */
  .ux-sphere.converging,
  .product-sphere.converging,
  .tech-sphere.converging {
    transform: translate(-50%, -50%) scale(0.7) !important;
    animation: none !important;
  }

  /* Mobile: Keep full size during convergence */
  @media (max-width: 768px) {
    .ux-sphere.converging,
    .product-sphere.converging,
    .tech-sphere.converging {
      transform: translate(-50%, -50%) scale(0.8) !important;
    }
  }

  /* Stop ring spinning during convergence */
  .convergence-visualization.converging .ring-1,
  .convergence-visualization.converging .ring-2,
  .convergence-visualization.converging .ring-3 {
    animation: none !important;
  }

  /* ===== CONVERGENCE RINGS ===== */
  .convergence-rings {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
  }

  .ring {
    position: absolute;
    border: 3px dashed rgba(0,0,0,0.3);
    border-radius: 50%;
    opacity: 1;
    transform: scale(1);
  }

  .ring-1 {
    width: 260px;
    height: 260px;
    top: -130px;
    left: -130px;
    animation: ring-spin-1 15s linear infinite;
  }

  .ring-2 {
    width: 370px;
    height: 370px;
    top: -185px;
    left: -185px;
    animation: ring-spin-2 20s linear infinite reverse;
  }

  .ring-3 {
    width: 490px;
    height: 490px;
    top: -245px;
    left: -245px;
    animation: ring-spin-3 25s linear infinite;
  }

  .ring.active {
    opacity: 0.3;
    transform: scale(1);
  }

  .sphere-glow.active {
    opacity: 0.6;
    animation: glow 3s ease-in-out infinite;
  }

  .sphere-trail.active {
    opacity: 0.8;
    animation: trail 2s ease-in-out infinite;
  }

  /* ===== KEYFRAME ANIMATIONS ===== */
  @keyframes glow {
    0%, 100% {
      opacity: 0.3;
      transform: scale(1);
    }
    50% {
      opacity: 0.6;
      transform: scale(1.1);
    }
  }

  @keyframes trail {
    0%, 100% {
      opacity: 0.3;
      transform: translate(-50%, -50%) scale(1);
    }
    50% {
      opacity: 0.8;
      transform: translate(-50%, -50%) scale(1.5);
    }
  }

  @keyframes orbit-ux {
    0% {
      transform: translate(-50%, -50%) rotate(120deg) translateX(180px) rotate(-120deg);
    }
    100% {
      transform: translate(-50%, -50%) rotate(480deg) translateX(180px) rotate(-480deg);
    }
  }

  @keyframes orbit-product {
    0% {
      transform: translate(-50%, -50%) rotate(240deg) translateX(240px) rotate(-240deg);
    }
    100% {
      transform: translate(-50%, -50%) rotate(600deg) translateX(240px) rotate(-600deg);
    }
  }

  @keyframes orbit-tech {
    0% {
      transform: translate(-50%, -50%) rotate(0deg) translateX(210px) rotate(0deg);
    }
    100% {
      transform: translate(-50%, -50%) rotate(-360deg) translateX(210px) rotate(360deg);
    }
  }

  /* Ring spinning animations */
  @keyframes ring-spin-1 {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes ring-spin-2 {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes ring-spin-3 {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }



  /* ===== RESPONSIVE DESIGN ===== */
  
  /* Large screens (1400px+) */
  @media (min-width: 1400px) {
    .hero-convergence {
      min-height: 190vh;
    }
    
    .convergence-visualization {
      width: 700px;
      height: 700px;
      top: 23%;
    }
    
    .convergence-title {
      width: 800px;
      top: -150px;
    }
    
    .convergence-title-main {
      font-size: 7rem;
    }
    
    .convergence-title-subtitle {
      font-size: 1.5rem;
      max-width: 750px;
    }
    
    .business-sphere {
      width: 140px;
      height: 140px;
    }
    
    .ux-sphere,
    .product-sphere,
    .tech-sphere {
      width: 140px;
      height: 140px;
    }
    
    .ring-1 {
      width: 260px;
      height: 260px;
      top: -130px;
      left: -130px;
    }
    
    .ring-2 {
      width: 370px;
      height: 370px;
      top: -185px;
      left: -185px;
    }
    
    .ring-3 {
      width: 490px;
      height: 490px;
      top: -245px;
      left: -245px;
    }
  }

  /* Medium screens (1024px - 1399px) */
  @media (max-width: 1399px) and (min-width: 480px) {
    .hero-convergence {
      min-height: 190vh;
    }
    
    .convergence-visualization {
      width: 600px;
      height: 600px;
      top: 24%;
    }
    
    .convergence-title {
      width: 700px;
      top: -120px;
    }
    
    .convergence-title-main {
      font-size: clamp(3.5rem, 6vw, 6rem);
    }
    
    .convergence-title-subtitle {
      font-size: clamp(0.85rem, 2vw, 1.3rem);
      max-width: 650px;
    }
    
    .business-sphere {
      width: 130px;
      height: 130px;
    }
    
    .ux-sphere,
    .product-sphere,
    .tech-sphere {
      width: 130px;
      height: 130px;
    }
    
    .ring-1 {
      width: 220px;
      height: 220px;
      top: -110px;
      left: -110px;
    }
    
    .ring-2 {
      width: 320px;
      height: 320px;
      top: -160px;
      left: -160px;
    }
    
    .ring-3 {
      width: 420px;
      height: 420px;
      top: -210px;
      left: -210px;
    }
  }

  /* Small mobile screens (≤480px) */
  @media (max-width: 480px) {
    .hero-convergence {
      min-height: 150vh;
    }
    
    .convergence-visualization {
      width: 400px;
      height: 400px;
      top: 35%;
    }
    
    .convergence-title {
      width: 85%;
      top: -90px;
    }
    
    .convergence-title-main {
      font-size: clamp(2.5rem, 4vw, 2.5rem);
      margin-bottom: 0.6rem;
    }
    
    .convergence-title-subtitle {
      font-size: clamp(0.75rem, 1.6vw, 0.9rem);
      max-width: 350px;
      line-height: 1.3;
    }
    
    .business-sphere {
      width: 100px;
      height: 100px;
    }
    
    .ux-sphere,
    .product-sphere,
    .tech-sphere {
      width: 90px;
      height: 90px;
      border-width: 2px;
    }
    
    .sphere-text {
      font-size: 0.45rem;
    }
    
    .ring-1 {
      width: 160px;
      height: 160px;
      top: -80px;
      left: -80px;
    }
    
    .ring-2 {
      width: 230px;
      height: 230px;
      top: -115px;
      left: -115px;
    }
    
    .ring-3 {
      width: 290px;
      height: 290px;
      top: -145px;
      left: -145px;
    }
    
    /* Small mobile orbital animations */
    @keyframes orbit-ux {
      0% { transform: translate(-50%, -50%) rotate(120deg) translateX(140px) rotate(-120deg); }
      100% { transform: translate(-50%, -50%) rotate(480deg) translateX(140px) rotate(-480deg); }
    }
    @keyframes orbit-product {
      0% { transform: translate(-50%, -50%) rotate(240deg) translateX(170px) rotate(-240deg); }
      100% { transform: translate(-50%, -50%) rotate(600deg) translateX(170px) rotate(-600deg); }
    }
    @keyframes orbit-tech {
      0% { transform: translate(-50%, -50%) rotate(0deg) translateX(155px) rotate(0deg); }
      100% { transform: translate(-50%, -50%) rotate(-360deg) translateX(155px) rotate(360deg); }
    }
  }

</style>

<script>
  /**
   * Convergence Visualization Controller
   * Manages the solar system-like orbital animation and convergence behavior
   */
  class ConvergenceController {
    // DOM Elements
    private uxSphere!: HTMLElement | null;
    private productSphere!: HTMLElement | null;
    private techSphere!: HTMLElement | null;
    private businessGlow!: HTMLElement | null;
    private uxTrail!: HTMLElement | null;
    private productTrail!: HTMLElement | null;
    private techTrail!: HTMLElement | null;
    private rings!: NodeListOf<Element>;
    private visualizationContainer!: HTMLElement | null;
    private businessSphereText!: HTMLElement | null;
    private convergenceTitle!: HTMLElement | null;
    private convergenceTitleMain!: HTMLElement | null;
    private convergenceTitleSubtitle!: HTMLElement | null;
    private scrollProgress!: HTMLElement | null;
    private scrollIndicator!: HTMLElement | null;
    
    // State Management
    private isConverging: boolean = false;
    private scrollHandler: (() => void) | null = null;
    private lastScrollY: number = 0;
    private titleHasBeenShown: boolean = false;

    constructor() {
      this.initializeElements();
      this.init();
    }

    /**
     * Initialize DOM element references
     */
    private initializeElements(): void {
      this.uxSphere = document.querySelector('.ux-sphere');
      this.productSphere = document.querySelector('.product-sphere');
      this.techSphere = document.querySelector('.tech-sphere');
      this.businessGlow = document.querySelector('.business-sphere .sphere-glow');
      this.uxTrail = document.querySelector('.ux-sphere .sphere-trail');
      this.productTrail = document.querySelector('.product-sphere .sphere-trail');
      this.techTrail = document.querySelector('.tech-sphere .sphere-trail');
      this.rings = document.querySelectorAll('.ring');
      this.visualizationContainer = document.querySelector('.convergence-visualization');
      this.businessSphereText = document.querySelector('.business-sphere .sphere-text');
      this.convergenceTitle = document.getElementById('convergenceTitle');
      this.convergenceTitleMain = document.querySelector('.convergence-title-main');
      this.convergenceTitleSubtitle = document.querySelector('.convergence-title-subtitle');
      this.scrollProgress = document.getElementById('scrollProgress');
      this.scrollIndicator = document.getElementById('scrollIndicator');
    }

    /**
     * Initialize the controller
     */
    private init(): void {
      if (this.visualizationContainer) {
        this.addClickEffects();
        this.initScrollMovement();
        this.initScrollIndicator();
      } else {
        console.warn('ConvergenceVisualization: Required elements not found');
      }
    }

    /**
     * Initialize scroll-based movement with throttling
     */
    private initScrollMovement(): void {
      this.scrollHandler = this.handleScrollMovement.bind(this);
      let ticking = false;
      
      const throttledScrollHandler = () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.scrollHandler?.();
            ticking = false;
          });
          ticking = true;
        }
      };
      
      window.addEventListener('scroll', throttledScrollHandler);
    }

    /**
     * Handle scroll movement and animation phases
     */
    private handleScrollMovement(): void {
      const scrollY = window.scrollY;
      const windowHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = (windowHeight > 0) ? (scrollY / windowHeight) * 100 : 0;
      
      this.updateScrollProgress(scrollPercent);
      
      if (!this.visualizationContainer) return;

      // Responsive scroll parameters
      const isMobile = window.innerWidth <= 768;
      const isSmallMobile = window.innerWidth <= 480;
      
      const initialTop = isSmallMobile ? 15 : isMobile ? 18 : 20;
      const finalTop = isSmallMobile ? 65 : isMobile ? 100 : 120;
      const scrollRange = isSmallMobile ? 300 : isMobile ? 400 : 500;
      const titleRevealThreshold = isSmallMobile ? 120 : isMobile ? 150 : 200;
      
      // Determine scroll direction
      const isScrollingDown = scrollY > this.lastScrollY;
      this.lastScrollY = scrollY;
      
      if (scrollY <= scrollRange) {
        this.handlePhaseOne(scrollY, scrollRange, initialTop, finalTop, titleRevealThreshold, isScrollingDown);
      } else {
        this.handlePhaseTwo(initialTop, finalTop);
      }
    }

    /**
     * Update scroll progress bar
     */
    private updateScrollProgress(scrollPercent: number): void {
      if (this.scrollProgress) {
        this.scrollProgress.style.width = scrollPercent + '%';
      }
      
      // Hide scroll indicator after user has scrolled past the convergence point
      this.updateScrollIndicatorVisibility();
    }

    /**
     * Update scroll indicator visibility
     */
    private updateScrollIndicatorVisibility(): void {
      if (!this.scrollIndicator) return;
      
      const scrollY = window.scrollY;
      const isMobile = window.innerWidth <= 768;
      const isSmallMobile = window.innerWidth <= 480;
      
      const hideThreshold = isSmallMobile ? 200 : isMobile ? 250 : 300;
      
      if (scrollY > hideThreshold) {
        this.scrollIndicator.classList.add('hidden');
      } else {
        this.scrollIndicator.classList.remove('hidden');
      }
    }

    /**
     * Handle Phase 1: Smooth transition and title reveal
     */
    private handlePhaseOne(scrollY: number, scrollRange: number, initialTop: number, finalTop: number, titleRevealThreshold: number, isScrollingDown: boolean): void {
      const progress = scrollY / scrollRange;
      const currentTop = initialTop + (progress * (finalTop - initialTop));
      const moveY = (currentTop - initialTop) * window.innerHeight / 100;
      
      this.visualizationContainer!.style.transform = `translate(-50%, calc(-50% + ${moveY}px))`;
      
      // Direction-based title visibility logic
      if (scrollY > titleRevealThreshold) {
        this.showTitle();
        this.titleHasBeenShown = true;
      } else if (isScrollingDown && this.titleHasBeenShown) {
        // Keep title visible when scrolling down, even if below threshold
        this.showTitle();
      } else if (!isScrollingDown && scrollY < titleRevealThreshold) {
        // Only hide when scrolling up and below threshold
        this.hideTitle();
      }
      
      if (this.isConverging) {
        this.revertToOrbit();
      }
    }

    /**
     * Handle Phase 2: Final position and convergence
     */
    private handlePhaseTwo(initialTop: number, finalTop: number): void {
      const finalMoveY = (finalTop - initialTop) * window.innerHeight / 100;
      this.visualizationContainer!.style.transform = `translate(-50%, calc(-50% + ${finalMoveY}px))`;
      
      this.showTitle();
      
      if (!this.isConverging) {
        this.startConvergence();
      }
    }

    /**
     * Initialize scroll indicator functionality
     */
    private initScrollIndicator(): void {
      if (!this.scrollIndicator) return;
      
      this.scrollIndicator.addEventListener('click', () => {
        this.scrollToConvergence();
      });
    }

    /**
     * Smooth scroll to convergence section
     */
    private scrollToConvergence(): void {
      // Responsive scroll target
      const isMobile = window.innerWidth <= 768;
      const isSmallMobile = window.innerWidth <= 480;
      
      const scrollRange = isSmallMobile ? 300 : isMobile ? 400 : 500;
      const buffer = isSmallMobile ? 120 : isMobile ? 150 : 220;
      const targetScroll = scrollRange + buffer;
      
      window.scrollTo({
        top: targetScroll,
        behavior: 'smooth'
      });
    }

    /**
     * Show title and change sphere text to NEGOCIO
     */
    private showTitle(): void {
      this.setTitleVisibility(true);
      this.changeSphereText();
    }

    /**
     * Hide title and revert sphere text to MR ROMA
     */
    private hideTitle(): void {
      this.setTitleVisibility(false);
      this.revertSphereText();
    }

    /**
     * Set title visibility state
     */
    private setTitleVisibility(visible: boolean): void {
      const method = visible ? 'add' : 'remove';
      if (this.convergenceTitle) this.convergenceTitle.classList[method]('visible');
      if (this.convergenceTitleMain) this.convergenceTitleMain.classList[method]('visible');
      if (this.convergenceTitleSubtitle) this.convergenceTitleSubtitle.classList[method]('visible');
    }

    /**
     * Change sphere text from MR ROMA to NEGOCIO with animation
     */
    private changeSphereText(): void {
      this.animateSphereText('NEGOCIO');
    }

    /**
     * Revert sphere text back to MR ROMA with animation
     */
    private revertSphereText(): void {
      this.animateSphereText('MR ROMA');
    }

    /**
     * Animate sphere text change
     */
    private animateSphereText(newText: string): void {
      if (!this.businessSphereText) return;
      
      this.businessSphereText.style.opacity = '0';
      this.businessSphereText.style.transform = 'scale(0.9)';
      
      setTimeout(() => {
        if (this.businessSphereText) {
          this.businessSphereText.textContent = newText;
          this.businessSphereText.style.opacity = '1';
          this.businessSphereText.style.transform = 'scale(1)';
          
          setTimeout(() => {
            if (this.businessSphereText) {
              this.businessSphereText.style.transform = 'scale(1)';
            }
          }, 300);
        }
      }, 200);
    }

    /**
     * Start convergence animation - align spheres vertically
     */
    public startConvergence(): void {
      if (this.isConverging) return;
      this.isConverging = true;
      
      // Add converging class to visualization container to stop ring animations
      if (this.visualizationContainer) {
        this.visualizationContainer.classList.add('converging');
      }
      
      this.setSphereConvergenceState(true);
    }

    /**
     * Revert to orbital positions
     */
    public revertToOrbit(): void {
      if (!this.isConverging) return;
      this.isConverging = false;
      
      // Remove converging class from visualization container to resume ring animations
      if (this.visualizationContainer) {
        this.visualizationContainer.classList.remove('converging');
      }
      
      this.setSphereConvergenceState(false);
    }

    /**
     * Set convergence state for all spheres
     */
    private setSphereConvergenceState(converging: boolean): void {
      const spheres = [
        { element: this.uxSphere, top: '68%' },
        { element: this.productSphere, top: '78%' },
        { element: this.techSphere, top: '88%' }
      ];

      const isMobile = window.innerWidth <= 768;
      const scaleValue = isMobile ? '0.85' : '0.7';

      spheres.forEach(({ element, top }) => {
        if (!element) return;
        
        if (converging) {
          element.classList.add('converging');
          element.style.top = top;
          element.style.left = '53%';
          element.style.transform = `translate(-50%, -50%) scale(${scaleValue})`;
        } else {
          element.classList.remove('converging');
          element.style.top = '50%';
          element.style.left = '53%';
          element.style.transform = 'translate(-50%, -50%)';
        }
      });
    }

    /**
     * Add click effects to spheres
     */
    private addClickEffects(): void {
      const spheres = document.querySelectorAll('.sphere');
      spheres.forEach(sphere => {
        sphere.addEventListener('click', (event) => {
          const target = event.currentTarget as HTMLElement;
          const label = target.dataset.label;
          console.log(`Esfera seleccionada: ${label}`);
          
          this.animateSphereClick(target);
        });
      });
    }

    /**
     * Animate sphere click effect
     */
    private animateSphereClick(sphere: HTMLElement): void {
      sphere.style.transform = 'scale(0.9)';
      setTimeout(() => {
        sphere.style.transform = 'scale(1)';
      }, 150);
    }

    /**
     * Get current convergence state
     */
    public getConvergenceState(): boolean {
      return this.isConverging;
    }

    /**
     * Cleanup method to prevent memory leaks
     */
    public destroy(): void {
      if (this.scrollHandler) {
        window.removeEventListener('scroll', this.scrollHandler);
        this.scrollHandler = null;
      }
      
      // Clear all element references
      this.uxSphere = null;
      this.productSphere = null;
      this.techSphere = null;
      this.businessGlow = null;
      this.uxTrail = null;
      this.productTrail = null;
      this.techTrail = null;
      this.rings = document.querySelectorAll('');
      this.visualizationContainer = null;
      this.businessSphereText = null;
      this.convergenceTitle = null;
      this.convergenceTitleMain = null;
      this.convergenceTitleSubtitle = null;
      this.scrollProgress = null;
      this.scrollIndicator = null;
    }
  }

  /**
   * Initialize the convergence controller when DOM is ready
   */
  let convergenceController: ConvergenceController;
  
  document.addEventListener('DOMContentLoaded', () => {
    convergenceController = new ConvergenceController();
    
    // Expose controller globally for external access
    (window as any).convergenceController = convergenceController;
  });
</script>

