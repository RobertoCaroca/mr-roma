---
// Convergence Visualization Component - Handles all sphere animations and interactions
---

<div class="convergence-visualization">
  <!-- Business Sphere (Center) -->
  <div class="sphere business-sphere" data-label="MR ROMA">
    <div class="sphere-content">
      <span class="sphere-text">MR ROMA</span>
    </div>
    <div class="sphere-glow"></div>
  </div>
  
  <!-- UX Sphere -->
  <div class="sphere ux-sphere" data-label="UX">
    <div class="sphere-content">
      <span class="sphere-text">UX</span>
    </div>
    <div class="sphere-trail"></div>
  </div>
  
  <!-- Product Sphere -->
  <div class="sphere product-sphere" data-label="PRODUCTO">
    <div class="sphere-content">
      <span class="sphere-text">PRODUCTO</span>
    </div>
    <div class="sphere-trail"></div>
  </div>
  
  <!-- Technology Sphere -->
  <div class="sphere tech-sphere" data-label="TECNOLOGÍA">
    <div class="sphere-content">
      <span class="sphere-text">TECNOLOGÍA</span>
    </div>
    <div class="sphere-trail"></div>
  </div>
  
  <!-- Convergence Effect -->
  <div class="convergence-rings">
    <div class="ring ring-1"></div>
    <div class="ring ring-2"></div>
    <div class="ring ring-3"></div>
  </div>
</div>

<style>
  .convergence-visualization {
    position: absolute;
    top: 30%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 600px; /* Reduced from 700px */
    height: 600px; /* Reduced from 700px */
    margin: 0;
    z-index: 10;
    transition: transform 0.5s ease; /* Restore transition for smooth container movement */
  }

  .sphere {
    position: absolute;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }

  .sphere-content {
    text-align: center;
    color: #000000;
    font-weight: 700;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    z-index: 2;
    position: relative;
  }

  .sphere-text {
    font-size: 0.8rem;
  }

  .business-sphere .sphere-text {
    font-weight: 800;
    letter-spacing: 0.05em;
    color: #ffffff;
    transition: opacity 0.2s ease, transform 0.3s ease; /* Smooth transitions for text change */
  }

  .sphere-glow {
    position: absolute;
    top: -15px;
    left: -15px;
    right: -15px;
    bottom: -15px;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(0,0,0,0.1) 0%, transparent 70%);
    opacity: 0;
  }

  .sphere-trail {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 6px;
    height: 6px;
    background: rgba(0,0,0,0.3);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    opacity: 0;
  }

  /* Business Sphere (Center) */
  .business-sphere {
    width: 120px; /* Reduced from 140px */
    height: 120px; /* Reduced from 140px */
    background: #000000;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    box-shadow: 0 20px 60px rgba(0,0,0,0.3);
  }

  .business-sphere:hover {
    transform: translate(-50%, -50%) scale(1.1);
    box-shadow: 0 25px 70px rgba(0,0,0,0.4);
  }

  /* Orbital Spheres - Fixed positions in triangular arrangement */
  .ux-sphere {
    width: 120px; /* Reduced from 140px */
    height: 120px; /* Reduced from 140px */
    background: #ffffff;
    border: 4px solid #000000;
    position: absolute;
    top: 18%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 5;
    transition: all 0.6s ease; /* Restore transition for smooth movement */
  }

  .product-sphere {
    width: 120px; /* Reduced from 140px */
    height: 120px; /* Reduced from 140px */
    background: #ffffff;
    border: 4px solid #000000;
    position: absolute;
    top: 73%;
    left: 22%;
    transform: translate(-50%, -50%);
    z-index: 5;
    transition: all 0.6s ease; /* Restore transition for smooth movement */
  }

  .tech-sphere {
    width: 120px; /* Reduced from 140px */
    height: 120px; /* Reduced from 140px */
    background: #ffffff;
    border: 4px solid #000000;
    position: absolute;
    top: 73%;
    left: 78%;
    transform: translate(-50%, -50%);
    z-index: 5;
    transition: all 0.6s ease; /* Restore transition for smooth movement */
  }

  /* Convergence states - when spheres align vertically below center and get smaller */
  .ux-sphere.converging {
    top: 65%; /* Adjusted for better spacing with reduced container movement */
    left: 50%;
    transform: translate(-50%, -50%) scale(0.7);
  }

  .product-sphere.converging {
    top: 78%; /* Adjusted for better spacing */
    left: 50%;
    transform: translate(-50%, -50%) scale(0.7);
  }

  .tech-sphere.converging {
    top: 91%; /* Adjusted for better spacing */
    left: 50%;
    transform: translate(-50%, -50%) scale(0.7);
  }

  /* Convergence Rings - Dashed orbital paths */
  .convergence-rings {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
  }

  .ring {
    position: absolute;
    border: 3px dashed rgba(0,0,0,0.3);
    border-radius: 50%;
    opacity: 1;
    transform: scale(1);
  }

  .ring-1 {
    width: 220px; /* Reduced from 250px */
    height: 220px; /* Reduced from 250px */
    top: -110px; /* Adjusted from -125px */
    left: -110px; /* Adjusted from -125px */
  }

  .ring-2 {
    width: 310px; /* Reduced from 360px */
    height: 310px; /* Reduced from 360px */
    top: -155px; /* Adjusted from -180px */
    left: -155px; /* Adjusted from -180px */
  }

  .ring-3 {
    width: 410px; /* Reduced from 480px */
    height: 410px; /* Reduced from 480px */
    top: -205px; /* Adjusted from -240px */
    left: -205px; /* Adjusted from -240px */
  }

  /* Active states for rings */
  .ring.active {
    opacity: 0.3;
    transform: scale(1);
  }

  /* Active states for glow and trails */
  .sphere-glow.active {
    opacity: 0.6;
    animation: glow 3s ease-in-out infinite;
  }

  .sphere-trail.active {
    opacity: 0.8;
    animation: trail 2s ease-in-out infinite;
  }

  @keyframes glow {
    0%, 100% {
      opacity: 0.3;
      transform: scale(1);
    }
    50% {
      opacity: 0.6;
      transform: scale(1.1);
    }
  }

  @keyframes trail {
    0%, 100% {
      opacity: 0.3;
      transform: translate(-50%, -50%) scale(1);
    }
    50% {
      opacity: 0.8;
      transform: translate(-50%, -50%) scale(1.5);
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .convergence-visualization {
      width: 500px; /* Reduced from 600px */
      height: 500px; /* Reduced from 600px */
    }
    
    .business-sphere {
      width: 100px; /* Reduced from 120px */
      height: 100px; /* Reduced from 120px */
    }
    
    .ux-sphere,
    .product-sphere,
    .tech-sphere {
      width: 100px; /* Reduced from 120px */
      height: 100px; /* Reduced from 120px */
    }
    
    .ring-1 {
      width: 180px; /* Reduced from 220px */
      height: 180px; /* Reduced from 220px */
      top: -90px; /* Adjusted from -110px */
      left: -90px; /* Adjusted from -110px */
    }
    
    .ring-2 {
      width: 250px; /* Reduced from 310px */
      height: 250px; /* Reduced from 310px */
      top: -125px; /* Adjusted from -155px */
      left: -125px; /* Adjusted from -155px */
    }
    
    .ring-3 {
      width: 330px; /* Reduced from 410px */
      height: 330px; /* Reduced from 410px */
      top: -165px; /* Adjusted from -205px */
      left: -165px; /* Adjusted from -205px */
    }
  }

  @media (max-width: 480px) {
    .convergence-visualization {
      width: 400px; /* Reduced from 450px */
      height: 400px; /* Reduced from 450px */
    }
    
    .business-sphere {
      width: 80px; /* Reduced from 100px */
      height: 80px; /* Reduced from 100px */
    }
    
    .ux-sphere,
    .product-sphere,
    .tech-sphere {
      width: 80px; /* Reduced from 100px */
      height: 80px; /* Reduced from 100px */
    }
    
    .sphere-text {
      font-size: 0.6rem; /* Reduced from 0.65rem */
    }
    
    .ring-1 {
      width: 150px; /* Reduced from 180px */
      height: 150px; /* Reduced from 180px */
      top: -75px; /* Adjusted from -90px */
      left: -75px; /* Adjusted from -90px */
    }
    
    .ring-2 {
      width: 200px; /* Reduced from 250px */
      height: 200px; /* Reduced from 250px */
      top: -100px; /* Adjusted from -125px */
      left: -100px; /* Adjusted from -125px */
    }
    
    .ring-3 {
      width: 270px; /* Reduced from 330px */
      height: 270px; /* Reduced from 330px */
      top: -135px; /* Adjusted from -165px */
      left: -135px; /* Adjusted from -165px */
    }
  }
</style>

<script>
  // Convergence Visualization Controller
  export class ConvergenceController {
    private uxSphere: HTMLElement | null;
    private productSphere: HTMLElement | null;
    private techSphere: HTMLElement | null;
    private businessGlow: HTMLElement | null;
    private uxTrail: HTMLElement | null;
    private productTrail: HTMLElement | null;
    private techTrail: HTMLElement | null;
    private rings: NodeListOf<Element>;
    private visualizationContainer: HTMLElement | null;
    private businessSphereText: HTMLElement | null;
    private isConverging: boolean = false;
    private scrollHandler: (() => void) | null = null;

    constructor() {
      this.uxSphere = document.querySelector('.ux-sphere');
      this.productSphere = document.querySelector('.product-sphere');
      this.techSphere = document.querySelector('.tech-sphere');
      this.businessGlow = document.querySelector('.business-sphere .sphere-glow');
      this.uxTrail = document.querySelector('.ux-sphere .sphere-trail');
      this.productTrail = document.querySelector('.product-sphere .sphere-trail');
      this.techTrail = document.querySelector('.tech-sphere .sphere-trail');
      this.rings = document.querySelectorAll('.ring');
      this.visualizationContainer = document.querySelector('.convergence-visualization');
      this.businessSphereText = document.querySelector('.business-sphere .sphere-text');
      
      this.init();
    }

    private init(): void {
      if (this.visualizationContainer) {
        this.addClickEffects();
        this.initScrollMovement();
        this.initTitleObserver();
      } else {
        console.warn('ConvergenceVisualization: Required elements not found');
      }
    }

    // Initialize scroll-based movement with simplified logic
    private initScrollMovement(): void {
      this.scrollHandler = this.handleScrollMovement.bind(this);
      let ticking = false;
      
      const throttledScrollHandler = () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.scrollHandler?.();
            ticking = false;
          });
          ticking = true;
        }
      };
      
      window.addEventListener('scroll', throttledScrollHandler);
    }

    // Simplified scroll movement logic
    private handleScrollMovement(): void {
      const scrollY = window.scrollY;
      
      if (!this.visualizationContainer) return;

      // Simple three-phase system
      if (scrollY <= 100) {
        // Phase 1: Move container down gradually
        const moveY = Math.min(scrollY * 1.5, window.innerHeight * 0.6);
          this.visualizationContainer.style.transform = `translate(-50%, calc(-50% + ${moveY}px))`;
        
        // Reset convergence state
        if (this.isConverging) {
          this.revertToOrbit();
        }
      } else if (scrollY <= 180) {
        // Phase 2: Container in final position, start convergence
        const finalMoveY = window.innerHeight * 0.6;
        this.visualizationContainer.style.transform = `translate(-50%, calc(-50% + ${finalMoveY}px))`;
        
        // Start convergence if not already converging
          if (!this.isConverging) {
            this.startConvergence();
        }
      } else {
        // Phase 3: Full convergence
        const finalMoveY = window.innerHeight * 0.6;
        this.visualizationContainer.style.transform = `translate(-50%, calc(-50% + ${finalMoveY}px))`;
          
          // Ensure spheres are converging
          if (!this.isConverging) {
            this.startConvergence();
        }
      }
    }

    // Initialize observer for title appearance
    private initTitleObserver(): void {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const target = mutation.target as HTMLElement;
            if (target.classList.contains('visible') && target.classList.contains('hero-title')) {
              this.changeSphereText();
            } else if (!target.classList.contains('visible') && target.classList.contains('hero-title')) {
              this.revertSphereText();
            }
          }
        });
      });

      const heroTitle = document.querySelector('.hero-title');
      if (heroTitle) {
        observer.observe(heroTitle, { attributes: true });
      }
    }

    // Change sphere text from MR ROMA to NEGOCIO
    private changeSphereText(): void {
      if (this.businessSphereText) {
        this.businessSphereText.style.opacity = '0';
        this.businessSphereText.style.transform = 'scale(0.8)';
        
        setTimeout(() => {
          if (this.businessSphereText) {
            this.businessSphereText.textContent = 'NEGOCIO';
            this.businessSphereText.style.opacity = '1';
            this.businessSphereText.style.transform = 'scale(1.1)';
            
            setTimeout(() => {
              if (this.businessSphereText) {
                this.businessSphereText.style.transform = 'scale(1)';
              }
            }, 300);
          }
        }, 200);
      }
    }

    // Revert sphere text back to MR ROMA
    private revertSphereText(): void {
      if (this.businessSphereText) {
        this.businessSphereText.style.opacity = '0';
        this.businessSphereText.style.transform = 'scale(0.8)';
        
        setTimeout(() => {
          if (this.businessSphereText) {
            this.businessSphereText.textContent = 'MR ROMA';
            this.businessSphereText.style.opacity = '1';
            this.businessSphereText.style.transform = 'scale(1.1)';
            
            setTimeout(() => {
              if (this.businessSphereText) {
                this.businessSphereText.style.transform = 'scale(1)';
              }
            }, 300);
          }
        }, 200);
      }
    }

    // Start convergence animation
    public startConvergence(): void {
      if (this.isConverging) return;
      this.isConverging = true;
      
      if (this.uxSphere) this.uxSphere.classList.add('converging');
      if (this.productSphere) this.productSphere.classList.add('converging');
      if (this.techSphere) this.techSphere.classList.add('converging');
    }

    // Revert to fixed positions
    public revertToOrbit(): void {
      if (!this.isConverging) return;
      this.isConverging = false;
      
      if (this.uxSphere) this.uxSphere.classList.remove('converging');
      if (this.productSphere) this.productSphere.classList.remove('converging');
      if (this.techSphere) this.techSphere.classList.remove('converging');
    }

    // Add click effects to spheres
    private addClickEffects(): void {
      const spheres = document.querySelectorAll('.sphere');
      spheres.forEach(sphere => {
        sphere.addEventListener('click', (event) => {
          const target = event.currentTarget as HTMLElement;
          const label = target.dataset.label;
          console.log(`Esfera seleccionada: ${label}`);
          
          // Simple click effect
          target.style.transform = 'scale(0.9)';
          setTimeout(() => {
            target.style.transform = 'scale(1)';
          }, 150);
        });
      });
    }

    // Public methods for external control
    public getConvergenceState(): boolean {
      return this.isConverging;
    }

    // Cleanup method to prevent memory leaks
    public destroy(): void {
      if (this.scrollHandler) {
        window.removeEventListener('scroll', this.scrollHandler);
        this.scrollHandler = null;
      }
      
      this.uxSphere = null;
      this.productSphere = null;
      this.techSphere = null;
      this.businessGlow = null;
      this.uxTrail = null;
      this.productTrail = null;
      this.techTrail = null;
      this.rings = document.querySelectorAll('');
      this.visualizationContainer = null;
      this.businessSphereText = null;
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    const convergenceController = new ConvergenceController();
    
    // Expose controller globally for external access
    (window as any).convergenceController = convergenceController;
  });
</script>
