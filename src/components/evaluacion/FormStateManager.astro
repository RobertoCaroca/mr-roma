---
// Form State Manager - Centralized state management for evaluation form
---

<script>
  // Centralized form state manager
  class FormStateManager {
    private static instance: FormStateManager;
    private managers: Map<string, any> = new Map();
    private isInitialized: boolean = false;

    private constructor() {}

    public static getInstance(): FormStateManager {
      if (!FormStateManager.instance) {
        FormStateManager.instance = new FormStateManager();
      }
      return FormStateManager.instance;
    }

    // Register a component manager
    public registerManager(name: string, manager: any): void {
      this.managers.set(name, manager);
    }

    // Get a component manager
    public getManager(name: string): any {
      return this.managers.get(name);
    }

    // Reset all form components
    public resetAll(): void {
      this.managers.forEach((manager, name) => {
        if (manager && typeof manager.reset === 'function') {
          manager.reset();
        }
      });
    }

    // Cleanup all managers
    public destroyAll(): void {
      this.managers.forEach((manager, name) => {
        if (manager && typeof manager.destroy === 'function') {
          manager.destroy();
        }
      });
      this.managers.clear();
    }

    // Initialize the form state manager
    public init(): void {
      if (this.isInitialized) return;
      
      // Expose reset function globally for backward compatibility
      (window as any).resetForm = () => {
        this.resetAll();
      };
      
      this.isInitialized = true;
    }
  }

  // Global instance
  const formStateManager = FormStateManager.getInstance();

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    formStateManager.init();
  });

  // Expose for use in other components
  (window as any).formStateManager = formStateManager;
</script>
