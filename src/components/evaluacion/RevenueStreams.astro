---
// Revenue Streams Component
---

<section class="form-section-group">
  <h2 class="section-title">Líneas de ingresos</h2>
  
  <div class="business-lines-container" id="businessLinesContainer">
    <div class="business-line-item" data-line="1">
      <div class="line-header">
        <h3 class="line-title">Línea de Ingreso 1</h3>
        <button type="button" class="remove-line-btn" data-action="remove-line" data-line="1" title="Eliminar línea de ingreso">×</button>
      </div>
      
      <div class="form-fields">
        <div class="form-group">
          <label for="businessName1">Nombre línea de ingreso</label>
          <input type="text" id="businessName1" name="businessName1" required placeholder="Ej: E-commerce, SaaS, Consultoría">
        </div>
        
        <div class="form-group">
          <label for="revenueGrowth1">Meta de crecimiento de ingresos (%) anual</label>
          <input type="number" id="revenueGrowth1" name="revenueGrowth1" min="0" max="1000" required placeholder="Ej: 25">
        </div>
      </div>
      
      <div class="indicators-section">
        <div class="indicators-header">
          <h4>Indicadores operacionales</h4>
          <button type="button" class="add-indicator-btn" data-action="add-indicator" data-line="1">+ Agregar indicador</button>
        </div>
        
        <div class="indicators-container" id="indicators1">
          <div class="indicator-item" data-indicator="1">
            <div class="indicator-row">
              <div class="form-group">
                <label for="indicator1_1">Principal indicador operacional</label>
                <input type="text" id="indicator1_1" name="indicator1_1" required placeholder="Ej: Tasa de Conversión, Churn Rate, NPS">
              </div>
              
              <div class="form-group">
                <label for="value1_1">Valor actual Aprox</label>
                <input type="text" id="value1_1" name="value1_1" required placeholder="Ej: 2.5%, 15%, 8.2">
              </div>
            </div>
            
            <button type="button" class="remove-indicator-btn" data-action="remove-indicator" data-line="1" data-indicator="1" title="Eliminar indicador">×</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="add-line-container">
    <button type="button" class="add-line-btn" data-action="add-line">+ Agregar Línea de ingreso</button>
  </div>
</section>

<style>
  .form-section-group {
    background: transparent;
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    padding: 2.5rem;
    margin-bottom: 2rem;
  }

  .section-title {
    font-size: clamp(2.5rem, 5vw, 3.5rem);
    font-weight: 900;
    margin-bottom: 2rem;
    color: #000000;
    letter-spacing: -0.08em;
    line-height: 1.1;
    text-transform: uppercase;
  }

  .business-line-item {
    background: transparent;
    border: 1px solid #e5e5e5;
    border-radius: 6px;
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .line-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e5e5e5;
  }

  .line-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #000000;
    margin: 0;
  }

  .form-fields {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .form-group {
    margin-bottom: 0;
  }

  .form-group label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: #000000;
    font-size: 0.9rem;
  }

  .form-group input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    font-size: 1rem;
    font-family: inherit;
    transition: border-color 0.2s ease;
    background: #ffffff;
  }

  .form-group input:focus {
    outline: none;
    border-color: #000000;
  }

  .form-group input::placeholder {
    color: #9ca3af;
  }

  .indicators-section {
    margin-top: 1.5rem;
  }

  .indicators-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: transparent;
    border-radius: 4px;
    border: 1px solid #e5e5e5;
  }

  .indicators-header h4 {
    font-size: 1rem;
    font-weight: 600;
    color: #000000;
    margin: 0;
  }

  .add-indicator-btn {
    background: #000000;
    color: #ffffff;
    border: none;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .add-indicator-btn:hover {
    background: #333333;
  }

  .indicator-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1rem;
    background: transparent;
    border: 1px solid #e5e5e5;
    border-radius: 4px;
    padding: 1rem;
  }

  .indicator-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    flex: 1;
  }

  .remove-indicator-btn {
    background: #dc2626;
    color: #ffffff;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    font-size: 1rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
    flex-shrink: 0;
    margin-top: 1.5rem;
  }

  .remove-indicator-btn:hover {
    background: #b91c1c;
  }

  .remove-line-btn {
    background: #dc2626;
    color: #ffffff;
    border: none;
    border-radius: 50%;
    width: 28px;
    height: 28px;
    font-size: 1.125rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
  }

  .remove-line-btn:hover {
    background: #b91c1c;
  }

  .add-line-container {
    text-align: center;
    margin-top: 1.5rem;
  }

  .add-line-btn {
    background: #000000;
    color: #ffffff;
    border: none;
    padding: 0.875rem 1.75rem;
    font-size: 1rem;
    font-weight: 500;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .add-line-btn:hover {
    background: #333333;
  }

  /* Responsive Design */
  @media (min-width: 1400px) {
    .section-title {
      font-size: 3.5rem;
      margin-bottom: 2.5rem;
    }
  }

  @media (max-width: 1399px) and (min-width: 1024px) {
    .section-title {
      font-size: clamp(3rem, 4vw, 3.5rem);
      margin-bottom: 2.5rem;
    }
  }

  @media (max-width: 1023px) and (min-width: 768px) {
    .section-title {
      font-size: clamp(2.5rem, 4.5vw, 3rem);
      margin-bottom: 2rem;
    }
  }

  @media (max-width: 767px) and (min-width: 481px) {
    .section-title {
      font-size: clamp(2rem, 5vw, 2.5rem);
      margin-bottom: 2rem;
    }
  }

  @media (max-width: 768px) {
    .form-section-group {
      padding: 1.5rem;
    }
    
    .business-line-item {
      padding: 1.5rem;
    }
    
    .form-fields {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .indicator-row {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .indicators-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }
    
    .line-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .form-section-group {
      padding: 1rem;
    }
    
    .business-line-item {
      padding: 1rem;
    }
    
    .section-title {
      font-size: clamp(1.75rem, 6vw, 2.5rem);
      margin-bottom: 1.5rem;
    }
    
    .add-line-btn {
      padding: 0.75rem 1.5rem;
      font-size: 0.875rem;
    }
  }
</style>

<script>
  class RevenueStreamsManager {
    private container: HTMLElement | null;
    private lineCounter: number = 1;
    private indicatorCounters: Map<number, number> = new Map();
    private maxLines: number = 10;
    private maxIndicatorsPerLine: number = 5;

    constructor() {
      this.container = document.getElementById('businessLinesContainer');
      this.indicatorCounters.set(1, 1);
      this.init();
    }

    private init(): void {
      if (!this.container) return;
      
      // Event delegation for all buttons
      this.container.addEventListener('click', this.handleClick.bind(this));
      
      // Add line button
      const addLineBtn = document.querySelector('[data-action="add-line"]');
      if (addLineBtn) {
        addLineBtn.addEventListener('click', this.addBusinessLine.bind(this));
      }
    }

    private handleClick(event: Event): void {
      const target = event.target as HTMLElement;
      const action = target.dataset.action;
      
      if (!action) return;

      switch (action) {
        case 'add-indicator':
          const lineNumber = parseInt(target.dataset.line || '1');
          this.addIndicator(lineNumber);
          break;
        case 'remove-indicator':
          const line = parseInt(target.dataset.line || '1');
          const indicator = parseInt(target.dataset.indicator || '1');
          this.removeIndicator(line, indicator);
          break;
        case 'remove-line':
          const lineToRemove = parseInt(target.dataset.line || '1');
          this.removeBusinessLine(lineToRemove);
          break;
      }
    }

    private addBusinessLine(): void {
      if (this.lineCounter >= this.maxLines) {
        alert(`Máximo ${this.maxLines} líneas de ingreso permitidas`);
        return;
      }

      this.lineCounter++;
      this.indicatorCounters.set(this.lineCounter, 1);
      
      if (!this.container) return;
      
      const newLine = this.createBusinessLineHTML(this.lineCounter);
      this.container.insertAdjacentHTML('beforeend', newLine);
    }

    private addIndicator(lineNumber: number): void {
      const currentCount = this.indicatorCounters.get(lineNumber) || 1;
      
      if (currentCount >= this.maxIndicatorsPerLine) {
        alert(`Máximo ${this.maxIndicatorsPerLine} indicadores por línea`);
        return;
      }

      this.indicatorCounters.set(lineNumber, currentCount + 1);
      
      const container = document.getElementById(`indicators${lineNumber}`);
      if (!container) return;
      
      const newIndicator = this.createIndicatorHTML(lineNumber, currentCount + 1);
      container.insertAdjacentHTML('beforeend', newIndicator);
    }

    private removeBusinessLine(lineNumber: number): void {
      if (lineNumber === 1) {
        alert('No se puede eliminar la primera línea de ingreso');
        return;
      }

      const lineElement = document.querySelector(`[data-line="${lineNumber}"]`);
      if (lineElement) {
        lineElement.remove();
        this.indicatorCounters.delete(lineNumber);
      }
    }

    private removeIndicator(lineNumber: number, indicatorNumber: number): void {
      const indicatorElement = document.querySelector(`[data-line="${lineNumber}"] [data-indicator="${indicatorNumber}"]`);
      if (indicatorElement) {
        indicatorElement.remove();
      }
    }

    private createBusinessLineHTML(lineNumber: number): string {
      return `
        <div class="business-line-item" data-line="${lineNumber}">
          <div class="line-header">
            <h3 class="line-title">Línea de Ingreso ${lineNumber}</h3>
            <button type="button" class="remove-line-btn" data-action="remove-line" data-line="${lineNumber}" title="Eliminar línea de ingreso">×</button>
          </div>
          
          <div class="form-fields">
            <div class="form-group">
              <label for="businessName${lineNumber}">Nombre línea de ingreso</label>
              <input type="text" id="businessName${lineNumber}" name="businessName${lineNumber}" required placeholder="Ej: E-commerce, SaaS, Consultoría">
            </div>
            
            <div class="form-group">
              <label for="revenueGrowth${lineNumber}">Meta de crecimiento de ingresos (%) anual</label>
              <input type="number" id="revenueGrowth${lineNumber}" name="revenueGrowth${lineNumber}" min="0" max="1000" required placeholder="Ej: 25">
            </div>
          </div>
          
          <div class="indicators-section">
            <div class="indicators-header">
              <h4>Indicadores operacionales</h4>
              <button type="button" class="add-indicator-btn" data-action="add-indicator" data-line="${lineNumber}">+ Agregar indicador</button>
            </div>
            
            <div class="indicators-container" id="indicators${lineNumber}">
              <div class="indicator-item" data-indicator="1">
                <div class="indicator-row">
                  <div class="form-group">
                    <label for="indicator${lineNumber}_1">Principal indicador operacional</label>
                    <input type="text" id="indicator${lineNumber}_1" name="indicator${lineNumber}_1" required placeholder="Ej: Tasa de Conversión, Churn Rate, NPS">
                  </div>
                  
                  <div class="form-group">
                    <label for="value${lineNumber}_1">Valor actual Aprox</label>
                    <input type="text" id="value${lineNumber}_1" name="value${lineNumber}_1" required placeholder="Ej: 2.5%, 15%, 8.2">
                  </div>
                </div>
                
                <button type="button" class="remove-indicator-btn" data-action="remove-indicator" data-line="${lineNumber}" data-indicator="1" title="Eliminar indicador">×</button>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    private createIndicatorHTML(lineNumber: number, indicatorNumber: number): string {
      return `
        <div class="indicator-item" data-indicator="${indicatorNumber}">
          <div class="indicator-row">
            <div class="form-group">
              <label for="indicator${lineNumber}_${indicatorNumber}">Principal indicador operacional</label>
              <input type="text" id="indicator${lineNumber}_${indicatorNumber}" name="indicator${lineNumber}_${indicatorNumber}" required placeholder="Ej: Tasa de Conversión, Churn Rate, NPS">
            </div>
            
            <div class="form-group">
              <label for="value${lineNumber}_${indicatorNumber}">Valor actual Aprox</label>
              <input type="text" id="value${lineNumber}_${indicatorNumber}" name="value${lineNumber}_${indicatorNumber}" required placeholder="Ej: 2.5%, 15%, 8.2">
            </div>
          </div>
          
          <button type="button" class="remove-indicator-btn" data-action="remove-indicator" data-line="${lineNumber}" data-indicator="${indicatorNumber}" title="Eliminar indicador">×</button>
        </div>
      `;
    }

    public reset(): void {
      this.lineCounter = 1;
      this.indicatorCounters.clear();
      this.indicatorCounters.set(1, 1);
      
      if (this.container) {
        const additionalLines = this.container.querySelectorAll('.business-line-item:not(:first-child)');
        additionalLines.forEach(line => line.remove());
        
        // Reset first line indicators
        const firstLineIndicators = this.container.querySelectorAll('.indicator-item:not(:first-child)');
        firstLineIndicators.forEach(indicator => indicator.remove());
      }
    }

    public destroy(): void {
      if (this.container) {
        this.container.removeEventListener('click', this.handleClick.bind(this));
      }
      this.container = null;
      this.indicatorCounters.clear();
    }
  }

  // Initialize when DOM is ready
  let revenueStreamsManager: RevenueStreamsManager;
  
  document.addEventListener('DOMContentLoaded', function() {
    revenueStreamsManager = new RevenueStreamsManager();
    
    // Register with FormStateManager if available
    if ((window as any).formStateManager) {
      (window as any).formStateManager.registerManager('revenueStreams', revenueStreamsManager);
    }
  });

  // Expose reset function globally for form reset (backward compatibility)
  (window as any).resetRevenueStreams = function(): void {
    if (revenueStreamsManager) {
      revenueStreamsManager.reset();
    }
  };
</script>
