---
// Header Component - Fixed header with logo
---

<!-- Fixed Header with Logo -->
<header class="fixed-header" id="fixedHeader">
  <div class="header-content">
    <div class="logo">
      <img src="/assets/mr-logo.svg" alt="MR ROMA Logo" class="logo-svg">
    </div>
  </div>
</header>

<style>
  /* Fixed Header Styles */
  .fixed-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    padding: 1rem 0;
    z-index: 1000;
    transform: translateY(-100%);
    transition: transform 0.3s ease;
    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
  }

  .fixed-header.visible {
    transform: translateY(0);
  }

  .header-content {
    max-width: 80%;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .logo {
    display: flex;
    align-items: center;
  }

  .logo-svg {
    display: block;
    transition: transform 0.2s ease;
  }

  .logo-svg:hover {
    transform: scale(1.05);
  }

  /* Responsive Header */
  @media (max-width: 768px) {
    .fixed-header {
      padding: 0.75rem 0;
    }
    
    .header-content {
      padding: 0 1rem;
    }
    
    .logo-svg {
      width: 50px;
      height: 34px;
    }
  }

  @media (max-width: 480px) {
    .fixed-header {
      padding: 0.5rem 0;
    }
    
    .logo-svg {
      width: 45px;
      height: 30px;
    }
  }
</style>

<script>
  // Header visibility controller
  class HeaderController {
    private fixedHeader: HTMLElement | null;
    private headerState: 'hidden' | 'visible' = 'hidden';
    private scrollHandler: (() => void) | null = null;

    constructor() {
      this.fixedHeader = document.getElementById('fixedHeader');
      this.init();
    }

    private init(): void {
      this.initScrollHandler();
    }

    private initScrollHandler(): void {
      this.scrollHandler = this.handleScroll.bind(this);
      let ticking = false;
      
      const throttledScrollHandler = () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.scrollHandler?.();
            ticking = false;
          });
          ticking = true;
        }
      };
      
      window.addEventListener('scroll', throttledScrollHandler);
    }

    private handleScroll(): void {
      const scrollY = window.scrollY;
      
      // Header visibility logic - show header when title is well out of view
      const shouldShowHeader = scrollY > 900;
      
      if (shouldShowHeader && this.headerState === 'hidden') {
        this.showHeader();
      } else if (!shouldShowHeader && this.headerState === 'visible') {
        this.hideHeader();
      }
    }

    private showHeader(): void {
      this.headerState = 'visible';
      if (this.fixedHeader) {
        this.fixedHeader.classList.add('visible');
      }
    }

    private hideHeader(): void {
      this.headerState = 'hidden';
      if (this.fixedHeader) {
        this.fixedHeader.classList.remove('visible');
      }
    }

    public destroy(): void {
      if (this.scrollHandler) {
        window.removeEventListener('scroll', this.scrollHandler);
        this.scrollHandler = null;
      }
      
      this.fixedHeader = null;
    }
  }

  // Initialize when DOM is ready
  let headerController: HeaderController;
  
  document.addEventListener('DOMContentLoaded', function() {
    headerController = new HeaderController();
  });
</script>
